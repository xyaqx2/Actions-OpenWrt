#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt Cache

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      config-file:
        description: 'Config file'
        required: false
        default: 'm4a-snapshot'
      repo-branch:
        description: 'Repo branch'
        required: false
        default: 'openwrt-23.05'
      clean-cache:
        description: 'Clean cache'
        required: false
        default: 'false'
      skip-toolchain:
        description: 'Skip the compilation of toolchain'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: ${{ github.event.inputs.repo-branch || 'openwrt-23.05' }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config-file || 'm4a-snapshot' }}.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Brunei

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check Server Performance
      run: |
        echo "Warningâš "
        echo "The assigned server has limited performance. If you select too many plug-ins, be sure to pay attention to the CPU performance!"
        echo -e "Known CPU models (in descending order): 8370C, 8272CL, 8171M, E5-2673\n"
        echo "--------------------------CPU information--------------------------"
        echo "Physical number of CPUs: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU core information: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------Memory information--------------------------"
        echo "Details of installed memory:"
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------Hard disk information--------------------------"
        echo "Number of hard disks: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* hhvm firefox google* microsoft-edge-stable dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Create cache key
      run: |
        cd openwrt
        echo "cache-openwrt-$(git log --pretty=tformat:"%h" -n1 -- tools toolchain)" > RESTORE_KEY
        echo "RESTORE_KEY=$(cat RESTORE_KEY)" >> $GITHUB_ENV
        echo "CACHE_KEY=$(cat RESTORE_KEY)-$(date +"%s")" >> $GITHUB_ENV 

    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/openwrt/staging_dir/host*
          ${{ github.workspace }}/openwrt/staging_dir/tool*
          ${{ github.workspace }}/openwrt/.ccache
        key: ${{ env.CACHE_KEY }}
        restore-keys: |
          ${{ env.RESTORE_KEY }}-
          cache-openwrt-

    - name: Clean cache
      if: github.event.inputs.clean-cache == 'true' && !cancelled()
      run: make distclean

    - name: Skip toolchain
      if: github.event.inputs.skip-toolchain == 'true' && !cancelled()
      run: |
        cd openwrt
        sed -i 's/ $(tool.*\\/stamp-compile)//;' Makefile
        sed -i 's/ $(tool.*\\/stamp-install)//;' Makefile

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        set -o pipefail
        { make tools/install -j$(($(nproc)+1)) | tee build.log ; } || { make tools/install -j1 V=s CONFIG_DEBUG_SECTION_MISMATCH=y 2>&1 | tee verbose.log | grep -i -E "^make.*(error|[12345]...Entering dir)" ; }
        { make toolchain/install -j$(($(nproc)+1)) | tee build.log ; } || { make toolchain/install -j1 V=s CONFIG_DEBUG_SECTION_MISMATCH=y 2>&1 | tee verbose.log | grep -i -E "^make.*(error|[12345]...Entering dir)" ; }
        set +o pipefail
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload logs
      uses: actions/upload-artifact@main
      if: (!cancelled())
      with:
        name: OpenWrt_log${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: |
            openwrt/logs
            openwrt*/*.log

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2.0.4
      with:
        retain_days: 90
        keep_minimum_runs: 3
        delete_workflow_pattern: ${{ github.workflow }}