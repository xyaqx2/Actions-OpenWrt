#!/bin/sh
#file: /usr/bin/rrm_nr
#based on: https://forum.openwrt.org/t/how-does-rrm-work/32635/73

NAME=rrm_nr

# Make sure we clean up our tmp dir on probable exit signals
cleanup() {
	rc=$?
	rm -rf "$hashmap"
	logger -t "rrm_nr" -p daemon.info "Removed hash map directory: $hashmap"
	exit $rc
}
trap cleanup EXIT INT HUP TERM QUIT

# Hash Map concept adopted from here:
# https://www.baeldung.com/linux/posix-shell-array#associative-arrays--hash-maps

# Function to create a new tmp dir for our hashmap
hm_create() {
	mktemp -d
}

# Function to create the hash value (checksum)
hm_hash() {
	echo "$1" | md5sum | head -c 32
}

# Argument 1: Hash Table
# Argument 2: Key
# Argument 3: Value
hm_put() {
	echo "$3" > "$1/$(hm_hash "$2")"
}

# Argument 1: Hash Table
# Argument 2: Key
hm_delete() {
	rm -f "$1/$(hm_hash "$2")"
}

# Argument 1: Hash Table
# Argument 2: Key
hm_get() {
	cat "$1/$(hm_hash "$2")"
}

first_run_complete=0
hashmap="$(hm_create)"

# We wrap everything into this function to allow GC by ash, esp. for low-mem devices
do_updates() {
	# If the first run, set the hostapd device-->SSID mapping so we can avoid this expensive
	# process on future iterations
	if [ $first_run_complete -eq 0 ]; then
		for wifi_iface in $(ubus list hostapd.* | awk -F. '{ print $2; }'); do
			net_ssid=$(iwinfo ${wifi_iface} info | head -n1 | cut -d\" -f2)
			[ -z "${net_ssid}" ] && logger -t "rrm_nr" -p daemon.error "${wifi_iface}: does not have ssid according to iwinfo." && continue

			# Store the mapping of hostapd-->SSID for faster lookup
			hm_put "$hashmap" "$wifi_iface" "$net_ssid"
		done

		first_run_complete=1
		logger -t "rrm_nr" -p daemon.info "Created initial hash map directory: $hashmap"
	fi

	local rrm_nr_lists

	OIFS=$IFS
	IFS=$'\n'

	# Discover neighbors and self
	ubus call umdns update
	sleep 5

	# Do this lookup as few times as possible for each update iteration
	hostapd_members=$(ubus list hostapd.* | awk -F. '{ print $2; }')

	for wifi_iface in $hostapd_members; do
		net_ssid=$(hm_get "$hashmap" "$wifi_iface")

		# Discover other nodes
		rrm_nr_lists=""

		for other_iface in $hostapd_members; do
			[ "${wifi_iface}" = "${other_iface}" ] && continue

			if [ "${net_ssid}" = "$(hm_get "$hashmap" "$other_iface")" ]; then
				rrm_nr_lists="${rrm_nr_lists}"$'\n'"$(/bin/ubus call hostapd.${other_iface} rrm_nr_get_own | /usr/bin/jsonfilter -e '$.value')"
			fi
		done

		# Sort at the end stabilizes the result, so we can compare it across runs
		for discovered_node in $(ubus call umdns browse '{ "service": "_rrm_nr._udp", "array": true }' | jsonfilter -e '@["_rrm_nr._udp"][*].txt[*]' | grep "\"${net_ssid}\"" | sed -E "s/SSID\d+=//g"); do
			rrm_nr_lists="${rrm_nr_lists}"$'\n'"${discovered_node}"
		done

		nr_len=$(echo "${rrm_nr_lists:1}" | wc -l)
		rrm_nr_lists=$(echo -n "${rrm_nr_lists:1}" | sort -u | tr '\n' ',' )
		rrm_nr_lists="[${rrm_nr_lists::-1}]"

		#[[ "${rrm_nr_lists}" == "," ]] && logger -t "rrm_nr" -p daemon.error "${wifi_iface}: no neighbors detected, nothing to do" && continue TODO is logging necessary?
		#[[ "${rrm_nr_lists}" == "," ]] && continue

		#ubus call hostapd.${wifi_iface} bss_mgmt_enable '{"neighbor_report": true}' neighbor_report shoud be enabled in uci TODO skip interface if not set
		prev_rrm_list="[$(ubus call hostapd.${wifi_iface} rrm_nr_list | jsonfilter -e '@.list[@]' | sort -u | sed ':a;N;$!ba;s/\n/,/g')]"
		if [ "$(echo -n ${prev_rrm_list} | sed 's: ::g')" = "$(echo -n ${rrm_nr_lists} | sed 's: ::g')" ]; then
			# Setting a new list will cause the wifi to quickly cycle, which we do not want every 60s
			continue
		fi
		logger -t "rrm_nr" -p daemon.info "${wifi_iface}: Updating neighbor list (number of neighbors: ${nr_len}): ${rrm_nr_lists}"
		ubus call hostapd.${wifi_iface} rrm_nr_set "{ \"list\": ${rrm_nr_lists} }"
	done

	IFS=$OIFS
}

# This is an alternate approach to the original "sleep 60" in the while loop below.
# The issue with "sleep 60" is that the rrm_nr service will not exit cleanly because
# by default it only waits up to 5 seconds for this script to exit. But because the while
# loop is sleeping, it fails to exit cleanly because procd sends a SIGKILL which cannot be
# trapped.

# Set the delay_counter to 20 initially so we immediately execute do_updates upon entering
# the while loop. Then subsequently set the counter back to 0 and begin incrementing every
# 3 seconds until we reach 20 iterations again (=60 seconds between do_updates calls).
# In this way, procd can actually signal a clean exit since this will become responsive again
# every 3 seconds now.
delay_counter=20
while true; do
	if [ $delay_counter -eq 20 ]; then
		do_updates
		delay_counter=0
	else
		delay_counter=$((delay_counter + 1))
	fi

	sleep 3
done

exit 0